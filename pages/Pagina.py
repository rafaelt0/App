import streamlit as st
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
import datetime
import plotly.express as px
import warnings
from pypfopt.expected_returns import mean_historical_return
from pypfopt.risk_models import CovarianceShrinkage
from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import objective_functions
from quantstats.stats import sharpe, sortino, max_drawdown, var, cvar, tail_ratio
import quantstats as qs
import tempfile

warnings.filterwarnings('ignore')
st.set_option('deprecation.showPyplotGlobalUse', False)

st.title("An√°lise de Portf√≥lio - B3 Explorer")

# --- Fun√ß√£o para filtrar tickers que t√™m dados ---
def filtrar_tickers_com_dados(tickers, start_date, end_date):
    tickers_validos = []
    for ticker in tickers:
        data = yf.download(ticker + ".SA", start=start_date, end=end_date, progress=False)
        if not data.empty and 'Close' in data.columns:
            tickers_validos.append(ticker)
    return tickers_validos

# --- Sidebar ---
st.sidebar.header('Configura√ß√µes ‚öôÔ∏è')

period_selected = st.sidebar.selectbox('Per√≠odo ‚è∞', ['di√°rio','semanal','trimestral','semestral','mensal','anual'])
period_dict = {'di√°rio':'1d','semanal':'1wk','mensal':'1mo','trimestral':'3mo','semestral':'6mo','anual':'1y'}

data_inicio = st.sidebar.date_input("Data InicialüìÖ", datetime.date(2014,1,1), min_value=datetime.date(2000,1,1))
interval_selected = st.sidebar.selectbox('Intervalo üìä', ['dia','m√™s','3 meses','semana','hora','minuto'])
interval_dict = {'dia':'1d','3 meses':'3mo', 'm√™s':'1mo','hora':'1h','minuto':'1m','semana':'1wk'}

valor_inicial = st.sidebar.number_input("Valor Investido üíµ", min_value=100, max_value=1_000_000)
taxa_selic = st.sidebar.number_input("Taxa Selic ü™ô (%)", value=0.04, max_value=15.0)

# --- Carrega tickers ---
data = pd.read_csv('acoes-listadas-b3.csv')
tickers = list(data['Ticker'].values)

# --- Filtra os tickers v√°lidos (pode demorar) ---
st.info('Filtrando a√ß√µes com dados dispon√≠veis, aguarde...')
tickers_validos = filtrar_tickers_com_dados(tickers, data_inicio, datetime.date.today())

# --- Sele√ß√£o dos tickers ---
tickers_selecionaveis = st.multiselect('Monte seu Portfolio (a√ß√µes com dados)', tickers_validos)

if not tickers_selecionaveis:
    st.warning("Selecione pelo menos uma a√ß√£o v√°lida para continuar.")
    st.stop()

tickers_yf = [t + ".SA" for t in tickers_selecionaveis]

try:
    # Baixa dados
    raw_data = yf.download(
        tickers_yf,
        start=data_inicio,
        end=datetime.datetime.now(),
        interval=interval_dict[interval_selected],
        progress=False
    )

    if raw_data.empty or 'Close' not in raw_data:
        st.error("Nenhum dado encontrado para os tickers selecionados.")
        st.stop()

    data_close = raw_data['Close']

    # Remove multiindex se existir
    if isinstance(data_close.columns, pd.MultiIndex):
        data_close.columns = ['_'.join(col).strip() for col in data_close.columns.values]

    st.subheader("Hist√≥rico de Fechamento")
    st.dataframe(data_close.tail())

    returns = data_close.pct_change().dropna()

    # Matriz de correla√ß√£o
    st.subheader("Matriz de Correla√ß√£o entre Ativos")
    fig_corr, ax_corr = plt.subplots(figsize=(8,6))
    sns.heatmap(returns.corr(), annot=True, cmap='coolwarm', ax=ax_corr)
    st.pyplot(fig_corr)

    # Otimiza√ß√£o Portf√≥lio
    mu = mean_historical_return(data_close)
    S = CovarianceShrinkage(data_close).ledoit_wolf()
    ef = EfficientFrontier(mu, S)
    ef.add_objective(objective_functions.L2_reg, gamma=2)
    weights = ef.max_sharpe(risk_free_rate=taxa_selic/100)
    weights_df = pd.DataFrame(ef.clean_weights(), index=["Peso"]).T
    weights_df = weights_df.round(4)

    st.subheader("Pesos √ìtimos do Portf√≥lio (%)")
    st.dataframe(weights_df*100)

    fig_pie = px.pie(weights_df, values="Peso", names=weights_df.index, title="Composi√ß√£o do Portf√≥lio")
    st.plotly_chart(fig_pie)

    weights_array = weights_df.values.flatten()
    portfolio_returns = returns.dot(weights_array)
    portfolio_returns.name = "Portfolio"
    cum_return = (1 + portfolio_returns).cumprod()
    portfolio_value = cum_return * valor_inicial

    # Evolu√ß√£o do Portfolio
    st.subheader("Evolu√ß√£o do Valor do Portf√≥lio")
    fig_val = px.line(portfolio_value, title="Valor do Portf√≥lio")
    st.plotly_chart(fig_val)

    # Informa√ß√µes do portf√≥lio
    portfolio_info = pd.DataFrame({
        "Valor Inicial": [valor_inicial],
        "Valor M√°ximo": [portfolio_value.max()],
        "Valor M√≠nimo": [portfolio_value.min()],
        "Valor Final": [portfolio_value.iloc[-1]],
        "Retorno Total (%)": [(portfolio_value.iloc[-1]/valor_inicial - 1)*100],
        "Retorno M√©dio Di√°rio (%)": [portfolio_returns.mean()*100],
        "Volatilidade Di√°ria (%)": [portfolio_returns.std()*100]
    })
    st.subheader("Informa√ß√µes do Portf√≥lio")
    st.dataframe(portfolio_info.style.format("{:,.2f}"))

    # Distribui√ß√£o dos Retornos com Estat√≠sticas
    st.subheader("Distribui√ß√£o dos Retornos Di√°rios (%) e Estat√≠sticas")
    fig_hist, ax_hist = plt.subplots(figsize=(10,5))
    sns.histplot(portfolio_returns*100, bins=50, kde=True, color='skyblue', ax=ax_hist)
    ax_hist.set_xlabel("Retornos Di√°rios (%)")
    ax_hist.set_ylabel("Frequ√™ncia")

    from scipy.stats import kurtosis, skew
    media = portfolio_returns.mean()*100
    desvio = portfolio_returns.std()*100
    curtose_val = kurtosis(portfolio_returns, fisher=True)
    assimetria_val = skew(portfolio_returns)

    stats_text = (f"M√©dia: {media:.4f}%\n"
                  f"Desvio Padr√£o: {desvio:.4f}%\n"
                  f"Curtose (Fisher): {curtose_val:.4f}\n"
                  f"Assimetria: {assimetria_val:.4f}")

    props = dict(boxstyle='round', facecolor='white', alpha=0.8)
    ax_hist.text(0.95, 0.95, stats_text, transform=ax_hist.transAxes,
                 fontsize=10, verticalalignment='top', horizontalalignment='right', bbox=props)
    st.pyplot(fig_hist)

    # Estat√≠sticas do Portf√≥lio
    stats = pd.DataFrame([[ 
        sharpe(portfolio_returns, rf=taxa_selic/100)/np.sqrt(2),
        sortino(portfolio_returns, rf=taxa_selic/100),
        max_drawdown(portfolio_returns),
        var(portfolio_returns),
        cvar(portfolio_returns),
        tail_ratio(portfolio_returns)
    ]], columns=["√çndice Sharpe", "√çndice Sortino", "Max Drawdown", "VaR", "CVaR", "Tail Ratio"])

    st.subheader("Estat√≠sticas do Portf√≥lio")
    st.dataframe(stats)

    # Relat√≥rio PDF com QuantStats
    st.subheader("Relat√≥rio Completo do Portfolio (PDF)")
    if st.button("Gerar e baixar relat√≥rio PDF"):
        with tempfile.NamedTemporaryFile(suffix=".pdf") as tmpfile:
            qs.reports.snapshot(portfolio_returns, output=tmpfile.name, benchmark=None, title="Relat√≥rio de Portfolio")
            tmpfile.seek(0)
            pdf_data = tmpfile.read()
            st.download_button(label="Download Relat√≥rio PDF", data=pdf_data, file_name="relatorio_portfolio.pdf", mime="application/pdf")

except Exception as e:
    st.error(f"Erro durante execu√ß√£o: {e}")








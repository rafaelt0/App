import streamlit as st
import yfinance as yf
import matplotlib.pyplot as plt
import numpy as np
import fundamentus
import pandas as pd
import seaborn as sns
import datetime
import warnings
import plotly.express as px
from sklearn.ensemble import IsolationForest
from io import BytesIO
from fpdf import FPDF

from pypfopt.expected_returns import mean_historical_return
from pypfopt.risk_models import CovarianceShrinkage
from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import objective_functions
from quantstats.stats import sharpe, sortino, max_drawdown, var, cvar, tail_ratio

warnings.filterwarnings('ignore')

st.subheader("An√°lise de Portfolio")
col1, col2, col3 = st.columns([1,3,1])

# Sidebar
st.sidebar.header('Configura√ß√µes ‚öôÔ∏è')
period_selected = st.sidebar.selectbox('Per√≠odo ‚è∞', ['di√°rio','semanal','trimestral','semestral','mensal','anual'])
period_dict = {'di√°rio':'1d','semanal':'1wk','mensal':'1mo','trimestral':'3mo','semestral':'6mo','anual':'1y'}

data_inicio = st.sidebar.date_input("Data InicialüìÖ", datetime.date(2014,1,1),min_value=datetime.date(2000,1,1))
interval_selected = st.sidebar.selectbox('Intervalo üìä', ['dia','m√™s','3 meses','semana','hora','minuto'])
interval_dict={'dia':'1d','3 meses':'3mo', 'm√™s':'1mo','hora':'1h','minuto':'1m','semana':'1wk'}

valor_inicial = st.sidebar.number_input("Valor Investido üíµ", min_value=100, max_value=1_000_000)
taxa_selic = st.sidebar.number_input("Taxa Selic ü™ô (%)", value=0.04, max_value=15.0)

# A√ß√µes
data = pd.read_csv('acoes-listadas-b3.csv')
stocks = list(data['Ticker'].values)
tickers = list(st.multiselect('Monte seu Portfolio (Escolha mais de uma a√ß√£o)', stocks))

if len(tickers) == 0:
    st.warning("Selecione pelo menos uma a√ß√£o para continuar.")
    st.stop()

tickers_yf = [t + ".SA" for t in tickers]

try:
    raw_data = yf.download(
        tickers_yf,
        start=data_inicio,
        end=datetime.datetime.now(),
        interval=interval_dict[interval_selected]
    )

    if raw_data.empty:
        st.error("Nenhum dado retornado. Mercado fechado ou ticker inv√°lido.")
        st.stop()

    if "Close" in raw_data:
        data_close = raw_data["Close"]
    else:
        st.error("Coluna Close n√£o encontrada.")
        st.stop()

    # Flatten colunas se MultiIndex
    if isinstance(data_close.columns, pd.MultiIndex):
        data_close.columns = ['_'.join(col).strip() for col in data_close.columns.values]

    st.subheader("Hist√≥rico de Fechamento")
    st.dataframe(data_close.tail())

    returns = data_close.pct_change().dropna()

    # Heatmap correla√ß√£o
    st.subheader("Matriz de Correla√ß√£o entre Ativos")
    fig, ax = plt.subplots(figsize=(8,6))
    sns.heatmap(returns.corr(), annot=True, cmap='coolwarm', ax=ax)
    st.pyplot(fig)

    # Otimiza√ß√£o Portf√≥lio
    mu = mean_historical_return(data_close)
    S = CovarianceShrinkage(data_close).ledoit_wolf()
    ef = EfficientFrontier(mu, S)
    ef.add_objective(objective_functions.L2_reg, gamma=2)
    weights = ef.max_sharpe(risk_free_rate=taxa_selic/100)
    weights_df = pd.DataFrame(ef.clean_weights(), index=["Peso"]).T
    weights_df = round(weights_df,4)

    st.subheader("Pesos √ìtimos do Portf√≥lio (%)")
    st.dataframe(weights_df*100)
    fig_pie = px.pie(weights_df, values="Peso", names=weights_df.index, title="Composi√ß√£o do Portf√≥lio")
    st.plotly_chart(fig_pie)

    weights_array = weights_df.values.flatten()
    portfolio_returns = returns.dot(weights_array)
    portfolio_returns.name = "Portfolio"
    cum_return = (1 + portfolio_returns).cumprod()
    portfolio_value = cum_return * valor_inicial

    st.subheader("Evolu√ß√£o do Valor do Portf√≥lio")
    fig_val = px.line(portfolio_value, title="Valor do Portf√≥lio")
    st.plotly_chart(fig_val)

    # Estat√≠sticas
    stats = pd.DataFrame([[
        sharpe(portfolio_returns, rf=taxa_selic/100)/np.sqrt(2),
        sortino(portfolio_returns, rf=taxa_selic/100),
        max_drawdown(portfolio_returns),
        var(portfolio_returns),
        cvar(portfolio_returns),
        tail_ratio(portfolio_returns)
    ]], columns=["√çndice Sharpe", "√çndice Sortino", "Max Drawdown", "VaR", "CVaR", "Tail Ratio"])

    st.subheader("Estat√≠sticas do Portf√≥lio")
    st.dataframe(stats)

    st.subheader("Retornos di√°rios (%)")
    st.line_chart(portfolio_returns*100)

    portfolio_info = pd.DataFrame({
        "Valor Inicial": [valor_inicial],
        "Valor M√°ximo": [portfolio_value.max()],
        "Valor M√≠nimo": [portfolio_value.min()],
        "Valor Final": [portfolio_value.iloc[-1]],
        "Retorno Total (%)": [(portfolio_value.iloc[-1]/valor_inicial - 1)*100],
        "Retorno M√©dio Di√°rio (%)": [portfolio_returns.mean()*100],
        "Volatilidade Di√°ria (%)": [portfolio_returns.std()*100]
    })

    st.subheader("Informa√ß√µes do Portf√≥lio")
    st.dataframe(portfolio_info.style.format("{:.2f}"))

    # === Detec√ß√£o de Anomalias com IsolationForest ===
    st.subheader("Detec√ß√£o de Anomalias nos Retornos")

    iso = IsolationForest(contamination=0.01, random_state=42)
    returns_np = portfolio_returns.values.reshape(-1,1)
    iso.fit(returns_np)
    preds = iso.predict(returns_np)  # 1 = normal, -1 = anomalia

    anomalies = portfolio_returns[preds == -1]
    st.write(f"Foram detectados {len(anomalies)} dias com comportamento an√¥malo nos retornos.")

    if not anomalies.empty:
        st.dataframe(anomalies)

    # === Exportar dados CSV ===
    csv = portfolio_value.to_frame().to_csv().encode('utf-8')
    st.download_button(label="Baixar hist√≥rico do valor do portf√≥lio (.csv)", data=csv, file_name='portfolio_value.csv', mime='text/csv')

    # === Gerar relat√≥rio PDF simples ===
    def generate_pdf():
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", "B", 16)
        pdf.cell(0, 10, "Relat√≥rio Resumido do Portf√≥lio", 0, 1, 'C')

        pdf.set_font("Arial", "", 12)
        pdf.cell(0, 10, f"Per√≠odo: {data_inicio} at√© {datetime.datetime.now().date()}", 0, 1)
        pdf.cell(0, 10, f"Valor Inicial: R$ {valor_inicial:,.2f}", 0, 1)
        pdf.cell(0, 10, f"Valor Final: R$ {portfolio_value.iloc[-1]:,.2f}", 0, 1)
        pdf.cell(0, 10, f"Retorno Total: {portfolio_info['Retorno Total (%)'].values[0]:.2f} %", 0, 1)

        # Estat√≠sticas chave
        pdf.cell(0, 10, f"√çndice Sharpe: {stats['√çndice Sharpe'].values[0]:.2f}", 0, 1)
        pdf.cell(0, 10, f"√çndice Sortino: {stats['√çndice Sortino'].values[0]:.2f}", 0, 1)
        pdf.cell(0, 10, f"Max Drawdown: {stats['Max Drawdown'].values[0]:.2f}", 0, 1)

        # Exportar para bytes
        pdf_output = BytesIO()
        pdf.output(pdf_output)
        return pdf_output.getvalue()

    pdf_bytes = generate_pdf()
    st.download_button(label="Baixar relat√≥rio resumido (PDF)", data=pdf_bytes, file_name="relatorio_portfolio.pdf", mime="application/pdf")

except Exception as e:
    st.error(f"Erro durante execu√ß√£o: {e}")



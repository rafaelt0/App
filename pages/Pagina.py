import streamlit as st
import yfinance as yf
import matplotlib.pyplot as plt
import numpy as np
import fundamentus
import pandas as pd
import seaborn as sns
import datetime
import warnings
import plotly.express as px
from fpdf import FPDF
import tempfile

from pypfopt.expected_returns import mean_historical_return
from pypfopt.risk_models import CovarianceShrinkage
from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import objective_functions
from quantstats.stats import sharpe, sortino, max_drawdown, var, cvar, tail_ratio
from scipy.stats import kurtosis, skew

warnings.filterwarnings('ignore')
st.set_option('deprecation.showPyplotGlobalUse', False)

st.subheader("An√°lise de Portfolio")
col1, col2, col3 = st.columns([1,3,1])

# Sidebar
st.sidebar.header('Configura√ß√µes ‚öôÔ∏è')
period_selected = st.sidebar.selectbox('Per√≠odo ‚è∞', ['di√°rio','semanal','trimestral','semestral','mensal','anual'])
period_dict = {'di√°rio':'1d','semanal':'1wk','mensal':'1mo','trimestral':'3mo','semestral':'6mo','anual':'1y'}

data_inicio = st.sidebar.date_input("Data InicialüìÖ", datetime.date(2014,1,1),min_value=datetime.date(2000,1,1))
interval_selected = st.sidebar.selectbox('Intervalo üìä', ['dia','m√™s','3 meses','semana','hora','minuto'])
interval_dict={'dia':'1d','3 meses':'3mo', 'm√™s':'1mo','hora':'1h','minuto':'1m','semana':'1wk'}

valor_inicial = st.sidebar.number_input("Valor Investido üíµ", min_value=100, max_value=1_000_000)
taxa_selic = st.sidebar.number_input("Taxa Selic ü™ô (%)", value=0.04, max_value=15.0)

# A√ß√µes
data = pd.read_csv('acoes-listadas-b3.csv')
stocks = list(data['Ticker'].values)
tickers = list(st.multiselect('Monte seu Portfolio (Escolha mais de uma a√ß√£o)', stocks))

if len(tickers) == 0:
    st.warning("Selecione pelo menos uma a√ß√£o para continuar.")
    st.stop()

tickers_yf = [t + ".SA" for t in tickers]

try:
    raw_data = yf.download(
        tickers_yf,
        start=data_inicio,
        end=datetime.datetime.now(),
        interval=interval_dict[interval_selected]
    )

    if raw_data.empty:
        st.error("Nenhum dado retornado. Mercado fechado ou ticker inv√°lido.")
        st.stop()

    data_close = raw_data["Close"] if "Close" in raw_data else raw_data

    # Flatten colunas se MultiIndex
    if isinstance(data_close.columns, pd.MultiIndex):
        data_close.columns = ['_'.join(col).strip() for col in data_close.columns.values]

    st.subheader("Hist√≥rico de Fechamento")
    st.dataframe(data_close.tail())

    returns = data_close.pct_change().dropna()

    # Heatmap correla√ß√£o
    st.subheader("Matriz de Correla√ß√£o entre Ativos")
    fig, ax = plt.subplots(figsize=(8,6))
    sns.heatmap(returns.corr(), annot=True, cmap='coolwarm', ax=ax)
    st.pyplot(fig)

    # === Otimiza√ß√£o com pesos din√¢micos e fallback ===
    mu = mean_historical_return(data_close)
    S = CovarianceShrinkage(data_close).ledoit_wolf()

    n_assets = len(tickers_yf)
    min_weight = 0.01
    max_weight = min(0.4, 3.0 / n_assets)  

    ef = EfficientFrontier(mu, S, weight_bounds=(min_weight, max_weight))
    ef.add_objective(objective_functions.L2_reg, gamma=2)

    try:
        weights = ef.max_sharpe(risk_free_rate=taxa_selic/100)
    except Exception:
        target_volatility = 0.15
        ef.efficient_risk(target_volatility)
        weights = ef.clean_weights()

    weights_df = pd.DataFrame(ef.clean_weights(), index=["Peso"]).T
    weights_df = round(weights_df,4)

    st.subheader("Pesos √ìtimos do Portf√≥lio (%)")
    st.dataframe(weights_df*100)
    fig_pie = px.pie(weights_df, values="Peso", names=weights_df.index, title="Composi√ß√£o do Portf√≥lio")
    st.plotly_chart(fig_pie)

    # Retornos do portf√≥lio
    weights_array = weights_df.values.flatten()
    portfolio_returns = returns.dot(weights_array)
    portfolio_returns.name = "Portfolio"

    cum_return = (1 + portfolio_returns).cumprod()
    portfolio_value = cum_return * valor_inicial

    # Evolu√ß√£o do portf√≥lio
    st.subheader("Evolu√ß√£o do Valor do Portf√≥lio")
    fig_val = px.line(portfolio_value, title="Valor do Portf√≥lio")
    st.plotly_chart(fig_val)

    # Informa√ß√µes do Portf√≥lio
    portfolio_info = pd.DataFrame({
        "Valor Inicial": [valor_inicial],
        "Valor M√°ximo": [portfolio_value.max()],
        "Valor M√≠nimo": [portfolio_value.min()],
        "Valor Final": [portfolio_value.iloc[-1]],
        "Retorno Total (%)": [(portfolio_value.iloc[-1]/valor_inicial - 1)*100],
        "Retorno M√©dio Di√°rio (%)": [portfolio_returns.mean()*100],
        "Volatilidade Di√°ria (%)": [portfolio_returns.std()*100]
    })
    st.subheader("Informa√ß√µes do Portf√≥lio")
    st.dataframe(portfolio_info.style.format("{:,.2f}"))

    # Distribui√ß√£o de retornos
    st.subheader("Distribui√ß√£o dos Retornos Di√°rios (%) e Estat√≠sticas")
    fig_hist, ax_hist = plt.subplots(figsize=(10,5))
    sns.histplot(portfolio_returns*100, bins=50, kde=True, color='skyblue', ax=ax_hist)
    ax_hist.set_xlabel("Retornos Di√°rios (%)")
    ax_hist.set_ylabel("Frequ√™ncia")

    media = portfolio_returns.mean()*100
    desvio = portfolio_returns.std()*100
    curtose_val = kurtosis(portfolio_returns, fisher=True)
    assimetria_val = skew(portfolio_returns)
    
    stats_text = (f"M√©dia: {media:.4f}%\n"
                  f"Desvio Padr√£o: {desvio:.4f}%\n"
                  f"Curtose (Fisher): {curtose_val:.4f}\n"
                  f"Assimetria: {assimetria_val:.4f}")

    props = dict(boxstyle='round', facecolor='white', alpha=0.8)
    ax_hist.text(0.95, 0.95, stats_text, transform=ax_hist.transAxes,
                 fontsize=10, verticalalignment='top', horizontalalignment='right', bbox=props)

    st.pyplot(fig_hist)

    # Estat√≠sticas do portf√≥lio
    stats = pd.DataFrame([[ 
        sharpe(portfolio_returns, rf=taxa_selic/100)/np.sqrt(2),
        sortino(portfolio_returns, rf=taxa_selic/100),
        max_drawdown(portfolio_returns),
        var(portfolio_returns),
        cvar(portfolio_returns),
        tail_ratio(portfolio_returns)
    ]], columns=["√çndice Sharpe", "√çndice Sortino", "Max Drawdown", "VaR", "CVaR", "Tail Ratio"])

    st.subheader("Estat√≠sticas do Portf√≥lio")
    st.dataframe(stats)

except Exception as e:
    st.error(f"Erro durante execu√ß√£o: {e}")







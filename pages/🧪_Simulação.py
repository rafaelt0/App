import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import warnings
import plotly.express as px
import plotly.graph_objects as go
from pypfopt.hierarchical_portfolio import HRPOpt
from quantstats.stats import sharpe, sortino, max_drawdown, var, cvar, tail_ratio
from scipy.stats import kurtosis, skew
import quantstats as qs
import matplotlib.ticker as mtick
import io
import base64








st.header("Simula√ß√£o Monte Carlo por Ativos (Multivariada) üë®‚Äçüî¨")

def get_base64_of_bin_file(bin_file):
    with open(bin_file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

# converte a imagem para base64
img_base64 = get_base64_of_bin_file("b3explorer.png")

st.markdown(
    f"""
    <div style="text-align: center;">
        <img src="data:image/png;base64,{img_base64}" width="250">
    </div>
    """,
    unsafe_allow_html=True
)

# Verifica se as vari√°veis necess√°rias j√° est√£o no session_state
required_keys = ["modo", "returns", "pesos_manuais", "peso_manual_df"]
for key in required_keys:
    if key not in st.session_state:
        st.warning("‚ö†Ô∏è Configure primeiro seu portf√≥lio na aba 1 para liberar a simula√ß√£o Monte Carlo.")
        st.stop()

# Recupera as vari√°veis da aba 1
modo = st.session_state["modo"]
returns = st.session_state["returns"]
pesos_manuais = st.session_state["pesos_manuais"]
peso_manual_df = st.session_state["peso_manual_df"]

with st.form("form_simulacao"):
    n_simulations = st.slider("N√∫mero de Simula√ß√µes", 10, 500, 200,
                              help="Quantidade de trajet√≥rias simuladas para o portf√≥lio.")
    valor = st.number_input("Capital Inicial (R$)", min_value=100,
                            help="Valor inicial investido no portf√≥lio.")
    years = int(st.number_input("Anos", min_value=1,
                                help="Horizonte da simula√ß√£o em anos."))
    
    submitted = st.form_submit_button("Rodar Simula√ß√£o")

if not submitted:
    st.info("Configure os par√¢metros acima e clique em 'Rodar Simula√ß√£o' para ver os resultados.")
    st.stop()

st.header("Simula√ß√£o üß™")

n_dias = years * 252  # 252 dias √∫teis no ano
valor_inicial = valor

# Garante que temos um dicion√°rio de pesos, independente do modo escolhido
if modo == "Aloca√ß√£o Manual":
    pesos_dict = pesos_manuais
else:
    pesos_dict = dict(zip(peso_manual_df.index + ".SA", peso_manual_df["Peso"].values))

# Remove ativos com peso zero (se houver)
pesos_dict = {k: v for k, v in pesos_dict.items() if v > 1e-6}

aligned_returns = returns.loc[:, pesos_dict.keys()].dropna()

pesos = np.array(list(pesos_dict.values()))

mu = aligned_returns.mean().values  # vetor m√©dia de retorno di√°rio
cov = aligned_returns.cov().values  # matriz covari√¢ncia di√°ria

np.random.seed(42)  # para reprodutibilidade

# Simular retornos multivariados normais correlacionados
retornos_simulados = np.random.multivariate_normal(mu, cov, size=(n_dias, n_simulations))

# Calcular trajet√≥rias para cada ativo em cada simula√ß√£o
precos_simulados = np.exp(retornos_simulados.cumsum(axis=0))

# Calcular valor do portf√≥lio: soma ponderada dos ativos para cada dia e simula√ß√£o
valor_portfolio = (precos_simulados * pesos).sum(axis=2) * valor_inicial

# Criar DataFrame para facilitar manipula√ß√£o e plotagem
datas = pd.date_range(start=datetime.date.today(), periods=n_dias+1, freq='B')
valor_portfolio = np.vstack([np.ones(n_simulations)*valor_inicial, valor_portfolio])
sim_df = pd.DataFrame(valor_portfolio, index=datas)

# Estat√≠sticas finais da simula√ß√£o
valores_finais = sim_df.iloc[-1]
valor_esperado = valores_finais.mean()
var_5 = np.percentile(valores_finais, 5)
cvar_5 = valores_finais[valores_finais <= var_5].mean()
pior_cenario = valores_finais.min()
melhor_cenario = valores_finais.max()

sim_stats = pd.DataFrame({
    "Valor Esperado Final (R$)": [valor_esperado],
    "VaR 5% (R$)": [var_5],
    "CVaR 5% (R$)": [cvar_5],
    "Pior Cen√°rio (R$)": [pior_cenario],
    "Melhor Cen√°rio (R$)": [melhor_cenario]
})

st.subheader("üìä Estat√≠sticas da Simula√ß√£o Monte Carlo por Ativos")
st.dataframe(sim_stats.style.format("{:,.2f}"))

st.markdown("""
<small><b>VaR 5%</b>: Valor m√°ximo esperado que voc√™ pode perder em 5% dos piores casos.<br>
<b>CVaR 5%</b>: M√©dia das perdas nos piores 5% dos casos, mostrando um risco mais extremo.</small>
""", unsafe_allow_html=True)

# Gr√°fico com algumas trajet√≥rias individuais para ilustrar a dispers√£o
st.subheader("Trajet√≥rias Individuais das Simula√ß√µes (Exemplos)")

fig_individual = go.Figure()
n_plot = min(20, n_simulations)  # limitar para 20 linhas para visualiza√ß√£o limpa

for i in range(n_plot):
    fig_individual.add_trace(go.Scatter(
        x=sim_df.index,
        y=sim_df.iloc[:, i],
        mode='lines',
        name=f'Simula√ß√£o {i+1}',
        line=dict(width=1),
        opacity=0.6
    ))
fig_individual.update_layout(
    title="Exemplos de Trajet√≥rias Simuladas do Valor do Portf√≥lio",
    xaxis_title="Data",
    yaxis_title="Valor do Portf√≥lio (R$)",
    template="plotly_white"
)
st.plotly_chart(fig_individual, use_container_width=True)

# Fan chart com percentis
percentis = [5, 25, 50, 75, 95]
fan_chart = sim_df.quantile(q=np.array(percentis) / 100, axis=1).T
fan_chart.columns = [f"P{p}" for p in percentis]

fig_fan = go.Figure()
fig_fan.add_trace(go.Scatter(
    x=fan_chart.index, y=fan_chart["P95"],
    line=dict(color='rgba(0,100,200,0.1)'), showlegend=False
))
fig_fan.add_trace(go.Scatter(
    x=fan_chart.index, y=fan_chart["P5"],
    fill='tonexty', fillcolor='rgba(0,100,200,0.2)',
    line=dict(color='rgba(0,100,200,0.1)'), name='Faixa 5%-95%'
))
fig_fan.add_trace(go.Scatter(
    x=fan_chart.index, y=fan_chart["P75"],
    line=dict(color='rgba(0,100,200,0.1)'), showlegend=False
))
fig_fan.add_trace(go.Scatter(
    x=fan_chart.index, y=fan_chart["P25"],
    fill='tonexty', fillcolor='rgba(0,100,200,0.4)',
    line=dict(color='rgba(0,100,200,0.1)'), name='Faixa 25%-75%'
))
fig_fan.add_trace(go.Scatter(
    x=fan_chart.index, y=fan_chart["P50"],
    line=dict(color='blue', width=2), name='Mediana'
))
fig_fan.update_layout(
    title="Simula√ß√£o Monte Carlo por Ativos - Fan Chart com Faixas de Confian√ßa",
    xaxis_title="Data",
    yaxis_title="Valor do Portf√≥lio (R$)",
    template="plotly_white"
)
st.plotly_chart(fig_fan, use_container_width=True)

# Histograma valor final
q1 = valores_finais.quantile(0.25)
q2 = valores_finais.quantile(0.50)
q3 = valores_finais.quantile(0.75)

st.subheader("Distribui√ß√£o do Valor Final do Portf√≥lio")
fig, ax = plt.subplots(figsize=(10,6))
sns.histplot(valores_finais, bins=30, kde=True, color='skyblue', edgecolor='black', ax=ax)
ax.axvline(q1, color='red', linestyle='--', label='Q1 (25%)')
ax.axvline(q2, color='green', linestyle='-', label='Mediana (50%)')
ax.axvline(q3, color='orange', linestyle='--', label='Q3 (75%)')
ax.set_title('Distribui√ß√£o dos Valores Finais da Simula√ß√£o Monte Carlo')
ax.set_xlabel('Valor Final do Portf√≥lio (R$)')
ax.set_ylabel('Frequ√™ncia')
ax.legend()
st.pyplot(fig)

# Estat√≠sticas da distribui√ß√£o final
estatisticas = {
    "M√≠nimo": valores_finais.min(),
    "Q1 (25%)": q1,
    "Mediana (50%)": q2,
    "Q3 (75%)": q3,
    "M√°ximo": valores_finais.max(),
    "M√©dia": valores_finais.mean(),
    "Desvio Padr√£o": valores_finais.std()
}
df_estatisticas = pd.DataFrame(estatisticas, index=["Valores (R$)"])
st.subheader("Estat√≠sticas da Distribui√ß√£o Final da Simula√ß√£o Monte Carlo")
st.dataframe(df_estatisticas.style.format("{:,.2f}"))






import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import warnings
import plotly.express as px
import plotly.graph_objects as go
from pypfopt.hierarchical_portfolio import HRPOpt
from quantstats.stats import sharpe, sortino, max_drawdown, var, cvar, tail_ratio
from scipy.stats import kurtosis, skew
import quantstats as qs
from bcb import sgs
import matplotlib.ticker as mtick
import io
import base64

# CSS customizado
with open("style.css") as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

warnings.filterwarnings('ignore')
st.set_option('deprecation.showPyplotGlobalUse', False)

# T√≠tulo da p√°gina
st.markdown("<h1 style='text-align: center;'>An√°lise e Otimiza√ß√£o de Portf√≥lio üíº</h1>", unsafe_allow_html=True)

# Centralizar a imagem
def get_base64_of_bin_file(bin_file):
    with open(bin_file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

# converte a imagem para base64
img_base64 = get_base64_of_bin_file("portfolio.png")

st.markdown(
    f"""
    <div style="text-align: center;">
        <img src="data:image/png;base64,{img_base64}" width="250">
    </div>
    """,
    unsafe_allow_html=True
)

# Adiciona espa√ßo vertical
st.markdown("<br><br>", unsafe_allow_html=True)

# Configura√ß√µes
data_inicio = st.date_input("Data Inicial üóìÔ∏è", datetime.date(2025, 1, 1), min_value=datetime.date(2000, 1, 1))
taxa_selic =  sgs.get(432, start=data_inicio)
taxa_selic = taxa_selic.iloc[-1,0]
taxa_selic = (1+taxa_selic)**(1/252)-1


# Sele√ß√£o de a√ß√µes
data = pd.read_csv('acoes-listadas-b3.csv')
stocks = list(data['Ticker'].values)
tickers = st.multiselect("Selecione as a√ß√µes do portf√≥lio üìä", stocks)
# Valor inicial
valor_inicial = st.number_input("Valor Investido (R$) üíµ", 100, 1_000_000, 10_000)

# Escolha modo: manual ou otimizado
modo = st.radio("Modo de aloca√ß√£o ‚öôÔ∏è", ("Otimiza√ß√£o Hierarchical Risk Parity (Machine Learning) ü§ñ", "Aloca√ß√£o Manual üîß"))

if len(tickers) == 0:
    st.warning("Selecione pelo menos uma a√ß√£o.")
    st.stop()

if len(tickers) == 1:
    st.warning("Selecione pelo menos dois ativos para montar o portf√≥lio.")
    st.stop()

tickers_yf = [t + ".SA" for t in tickers]

# Baixa dados
data_yf = yf.download(tickers_yf, start=data_inicio, progress=False)['Close']
if isinstance(data_yf.columns, pd.MultiIndex):
    data_yf.columns = ['_'.join(col).strip() for col in data_yf.columns.values]

returns = data_yf.pct_change().dropna()





if st.button("Carregar Portf√≥lio"):

    
    if modo == "Aloca√ß√£o Manual":
        st.subheader("Defina manualmente a porcentagem de cada ativo (soma deve ser 100%)")
        pesos_manuais = {}
        total = 0.0
        for ticker in tickers:
            p = st.number_input(f"Peso % de {ticker}", min_value=0.0, max_value=100.0, value=round(100/len(tickers),2), step=0.01)
            pesos_manuais[ticker + ".SA"] = p / 100
            total += p
        if abs(total - 100) > 0.01:
            st.error(f"A soma dos pesos √© {total:.2f}%, deve ser 100%")
            st.stop()
        pesos_manuais_arr = np.array(list(pesos_manuais.values()))
        peso_manual_df = pd.DataFrame.from_dict(pesos_manuais, orient='index', columns=["Peso"])
    else:
        st.subheader("Otimiza√ß√£o Hierarchical Risk Parity (HRP)")
        hrp = HRPOpt(returns)
        weights_hrp = hrp.optimize()
        peso_manual_df = pd.DataFrame.from_dict(weights_hrp, orient='index', columns=["Peso"])
        pesos_manuais_arr = peso_manual_df["Peso"].values

    # Mostrar pesos
    st.subheader("Pesos do Portf√≥lio (%)")
    peso_manual_df.index = peso_manual_df.index.str.replace(".SA","")
    st.dataframe((peso_manual_df*100).round(2).T)
    
    
    
    
    
    # Gr√°fico pizza das porcentagens
    fig_pie = px.pie(peso_manual_df.reset_index(), values="Peso", names="index",
                     title="Composi√ß√£o do Portf√≥lio (%)",
                     labels={"index": "Ativo", "Peso": "Percentual"})
    st.plotly_chart(fig_pie)
    
    alloc_df = peso_manual_df.reset_index()
    alloc_df.columns = ["Ativo", "Peso"]
    
    fig_treemap = px.treemap(
        alloc_df,
        path=['Ativo'],
        values='Peso',
        color='Peso',
        color_continuous_scale='Blues',
        title="Aloca√ß√£o do Portf√≥lio (Treemap)"
    )
    st.plotly_chart(fig_treemap, use_container_width=True)
    
    
    # Heatmap e Matriz de Correla√ß√£o
    heatmap=sns.heatmap(data_yf.corr(), annot=True)
    st.subheader("Matrix de Correla√ß√£o")
    st.write(data_yf.corr())
    st.subheader("Heatmap")
    st.pyplot(heatmap.figure)
    
    # C√°lculo do portf√≥lio com os pesos escolhidos
    portfolio_returns = returns.dot(pesos_manuais_arr)
    cum_return = (1 + portfolio_returns).cumprod()
    portfolio_value = cum_return * valor_inicial
    
    # Obter os dados de benchmark BOVESPA e calcular o retorno acumulado
    bench = yf.download("^BVSP", start=data_inicio, progress=False)['Close']
    retorno_bench = bench.pct_change().dropna()
    portfolio_returns = portfolio_returns.loc[retorno_bench.index]
    retorno_bench = retorno_bench.loc[portfolio_returns.index]
    retorno_cum_bench = (1+retorno_bench).cumprod()
    bench_value = retorno_cum_bench * valor_inicial
    
    
    # Mostrar gr√°fico do valor do portf√≥lio x BOVESPA
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=portfolio_value.index, y=portfolio_value, 
                             mode='lines', name='Portf√≥lio'))
    fig.add_trace(go.Scatter(x=bench_value.index, y=bench_value, 
                             mode='lines', name='IBOVESPA'))
    fig.update_layout(title='Valor do Portf√≥lio',
                      xaxis_title='Data', yaxis_title='Valor (R$)')
    st.plotly_chart(fig)
    # Retornos mensais
    st.subheader("Retornos Mensais do Portf√≥lio")
    
    fig = qs.plots.monthly_returns(portfolio_returns, show=False)
    st.pyplot(fig)
    
    
    
    
    
    
    
    
    # Informa√ß√µes do portf√≥lio
    portfolio_info = pd.DataFrame({
        "Valor Inicial": [valor_inicial],
        "Valor M√°ximo": [portfolio_value.max()],
        "Valor M√≠nimo": [portfolio_value.min()],
        "Valor Final": [portfolio_value.iloc[-1]],
        "Retorno Total (%)": [(portfolio_value.iloc[-1]/valor_inicial - 1)*100],
        "Retorno M√©dio Di√°rio (%)": [portfolio_returns.mean()*100],
        "Volatilidade Di√°ria (%)": [portfolio_returns.std()*100]
    })
    st.subheader("Informa√ß√µes do Portf√≥lio")
    st.dataframe(portfolio_info.style.format("{:,.2f}"))
    
    # Distribui√ß√£o de retornos com estat√≠sticas
    st.subheader("Distribui√ß√£o dos Retornos Di√°rios (%) e Estat√≠sticas")
    fig_hist, ax_hist = plt.subplots(figsize=(10,5))
    sns.histplot(portfolio_returns*100, bins=50, kde=True, color='skyblue', ax=ax_hist)
    ax_hist.set_xlabel("Retornos Di√°rios (%)")
    ax_hist.set_ylabel("Frequ√™ncia")
    
    media = portfolio_returns.mean()*100
    desvio = portfolio_returns.std()*100
    curtose_val = kurtosis(portfolio_returns, fisher=True)
    assimetria_val = skew(portfolio_returns)
    
    stats_text = (f"M√©dia: {media:.4f}%\n"
                  f"Desvio Padr√£o: {desvio:.4f}%\n"
                  f"Curtose (Fisher): {curtose_val:.4f}\n"
                  f"Assimetria: {assimetria_val:.4f}")
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.8)
    ax_hist.text(0.95, 0.95, stats_text, transform=ax_hist.transAxes,
                 fontsize=10, verticalalignment='top', horizontalalignment='right', bbox=props)
    
    st.pyplot(fig_hist)
    
    # Estat√≠sticas do portf√≥lio
    stats = pd.DataFrame([[ 
        sharpe(portfolio_returns, rf=taxa_selic),
        sortino(portfolio_returns, rf=taxa_selic),
        max_drawdown(portfolio_returns),
        var(portfolio_returns),
        cvar(portfolio_returns),
        tail_ratio(portfolio_returns)
    ]], columns=["√çndice Sharpe", "√çndice Sortino", "Max Drawdown", "VaR", "CVaR", "Tail Ratio"])
    
    st.subheader("Estat√≠sticas do Portf√≥lio")
    st.dataframe(stats.round(4))
    
    # Gr√°fico Portfolio vs IBOVESPA
    st.subheader("Retorno Acumulado Portf√≥lio vs IBOVESPA")
    bench = yf.download("^BVSP", start=data_inicio)['Close'].pct_change().dropna()
    fig = qs.plots.returns(portfolio_returns, benchmark=bench, show=False)
    st.pyplot(fig)
    
    # M√©tricas vs bench
    bench_returns = bench
    cov_matrix = np.cov(portfolio_returns.squeeze(), bench_returns.squeeze())  # matriz de covari√¢ncia 2x2
    beta = cov_matrix[0,1] / cov_matrix[1,1]
    alfa = portfolio_returns.mean() - beta * bench_returns.mean()
    r_quadrado = qs.stats.r_squared(portfolio_returns, bench)
    information_ratio = qs.stats.information_ratio(portfolio_returns, bench)
    
    
    metricas = pd.DataFrame({
        "Alfa Anual (%)": [alfa.values[0]*252*100],
        "Beta": [beta],
        "R Quadrado (%)": [r_quadrado*100],
        "Information Ratio": [information_ratio]
    })
    
    
    st.subheader("üìä M√©tricas do Portf√≥lio em rela√ß√£o ao Benchmark")
    st.dataframe(metricas.style.format({
    "Alfa Anual (%)": "{:,.2f}%",
    "Beta": "{:,.2f}",
    "R Quadrado (%)": "{:,.2f}%",
    "Information Ratio": "{:,.2f}"
    }))
    # Retornos Anuais
    
    fig = qs.plots.yearly_returns(portfolio_returns, benchmark=retorno_bench, compounded=True, show=False)
    ax = plt.gca()
    
    # Alterar legenda
    ax.legend(['Portf√≥lio', 'IBOVESPA'])  # renomeia
    ax.set_title('Retornos Anuais (Portf√≥lio vs IBOVESPA)')
    
    st.pyplot(fig)
        
    
    
    st.subheader("Drawdown do Portf√≥lio")
    # Drawdown
    st.subheader("An√°lise de Drawdown por Ativo")
    
    # Fun√ß√£o para calcular drawdown
    def calcular_drawdown(series):
        cum_returns = (1 + series).cumprod()
        rolling_max = cum_returns.cummax()
        drawdown = (cum_returns - rolling_max) / rolling_max
        return drawdown
    
    # Calcula drawdown para cada ativo
    drawdowns_ativos = returns.apply(calcular_drawdown)
    
    # Calcula m√°ximo drawdown e a data que ocorreu para cada ativo
    max_drawdowns = drawdowns_ativos.min()
    data_max_drawdowns = drawdowns_ativos.idxmin()
    
    df_drawdowns = pd.DataFrame({
        'M√°ximo Drawdown (%)': max_drawdowns * 100,
        'Data do M√°ximo Drawdown': data_max_drawdowns
    }).sort_values(by='M√°ximo Drawdown (%)')
    
    # Ajusta √≠ndice para mostrar ticker sem ".SA"
    df_drawdowns.index = df_drawdowns.index.str.replace(".SA", "", regex=False)
    
    st.dataframe(df_drawdowns.style.format({
        'M√°ximo Drawdown (%)': '{:.2f}%',
        'Data do M√°ximo Drawdown': lambda x: x.strftime('%Y-%m-%d')
    }))
    
    cum_returns = (1 + portfolio_returns).cumprod()
    rolling_max = cum_returns.cummax()
    drawdown = (cum_returns - rolling_max) / rolling_max
        
            # Plot Drawdown
    fig1, ax1 = plt.subplots(figsize=(10,4))
    ax1.fill_between(drawdown.index, drawdown.values, 0, color='red', alpha=0.4)
    ax1.set_title("Drawdown do Portf√≥lio")
    ax1.set_ylabel("Drawdown")
    ax1.set_xlabel("Data")
    ax1.grid(True)
    
    ax1.yaxis.set_major_formatter(mtick.PercentFormatter(1.0))
    st.pyplot(fig1)
        
    
    # Rolling Beta (60 dias)
    window = 60
    
    rolling_cov = portfolio_returns.rolling(window).cov(retorno_bench)
    rolling_var = retorno_bench.rolling(window).var()
    
    rolling_beta = rolling_cov / rolling_var
    
    # Gr√°fico Rolling Beta
    
    st.subheader(f"Beta M√≥vel ({window} dias) vs IBOVESPA")
    
    fig2, ax2 = plt.subplots(figsize=(10,4))
    ax2.plot(rolling_beta.index, rolling_beta.values, color='blue')
    ax2.axhline(1, color='gray', linestyle='--', alpha=0.7)
    ax2.set_title(f"Rolling Beta {window} dias")
    ax2.set_ylabel("Beta")
    ax2.set_xlabel("Data")
    ax2.grid(True)
    
    fig2.autofmt_xdate(rotation=15)
    
    st.pyplot(fig2)
    
    # Gr√°fico Sharpe M√≥vel
    rolling_sharpe = (
    (portfolio_returns.rolling(window).mean() - taxa_selic) /
    portfolio_returns.rolling(window).std())
    
    st.subheader(f"√çndice de Sharpe M√≥vel ({window} dias)")
    
    fig_3, ax_3 = plt.subplots(figsize=(10,4))
    ax_3.plot(rolling_sharpe.index, rolling_sharpe.values, color='green', label='Sharpe M√≥vel')
    ax_3.axhline(0, color='gray', linestyle='--', alpha=0.7, label='Zero')
    ax_3.set_title(f"√çndice de Sharpe M√≥vel ({window} dias) do Portf√≥lio")
    ax_3.set_ylabel("Sharpe")
    ax_3.set_xlabel("Data")
    ax_3.grid(True)
    ax_3.legend(loc='upper left')
    
    fig_3.autofmt_xdate(rotation=45)  # datas na diagonal
    fig_3.tight_layout()
    
    st.pyplot(fig_3)
    
    st.subheader("üìä An√°lise de Contribui√ß√£o de Risco")
    
    
    cov_matrix = returns.cov()
    port_vol = np.sqrt(np.dot(pesos_manuais_arr.T, np.dot(cov_matrix, pesos_manuais_arr)))
    marginal_contrib = np.dot(cov_matrix, pesos_manuais_arr) / port_vol
    risk_contribution = pesos_manuais_arr * marginal_contrib  # risco absoluto de cada ativo
    risk_contribution_pct = risk_contribution / risk_contribution.sum() * 100
    
    
    risk_df = pd.DataFrame({
        "Ativo": peso_manual_df.index,
        "Peso (%)": (pesos_manuais_arr*100).round(2),
        "RC (%)": risk_contribution_pct.round(2)
    })
    
    st.dataframe(risk_df.style.format({"Peso (%)": "{:,.2f}%", "RC (%)": "{:,.2f}%"}))
    
    
    fig_rc = px.bar(
        risk_df,
        x="Ativo",
        y="RC (%)",
        color="RC (%)",
        color_continuous_scale="Reds",
        title="Contribui√ß√£o de Risco por Ativo (%)"
    )
    st.plotly_chart(fig_rc, use_container_width=True)
    
    # Salva vari√°veis  para uso na aba Simula√ß√£o
    st.session_state["modo"] = modo
    st.session_state["returns"] = returns
    st.session_state["peso_manual_df"] = peso_manual_df
    st.session_state["portfolio_returns"] = portfolio_returns
    st.session_state["retorno_bench"] = retorno_bench
    
    # Garante que pesos manuais ficam dispon√≠veis como dicion√°rio
    if modo == "Aloca√ß√£o Manual":
        st.session_state["pesos_manuais"] = pesos_manuais
    else:
        st.session_state["pesos_manuais"] = peso_manual_df["Peso"].to_dict()
    
    
    
    
    
    
    
    
           
    
    
    
    
    
    
    
    
    
    
       

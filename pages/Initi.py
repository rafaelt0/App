import streamlit as st
import yfinance as yf
import matplotlib.pyplot as plt
import numpy as np
import fundamentus
import pandas as pd
import seaborn as sns
import warnings
import datetime
from scipy.stats import kurtosis, skew
import re
from GoogleNews import GoogleNews
from newspaper import Article
import nltk
import time

warnings.filterwarnings('ignore')
plt.style.use('ggplot')

# Baixa recursos do NLTK para sumariza√ß√£o
nltk.download('punkt')

# ----------------------------
# Fun√ß√µes Auxiliares
# ----------------------------
def clean_numeric_column(col):
    col = col.astype(str).str.strip()
    col = col.str.replace(r'[^0-9,.\-]', '', regex=True)
    col = col.str.replace(',', '.')
    return pd.to_numeric(col, errors='coerce')

def highlight_val(val, min_val=None, max_val=None):
    if pd.isna(val):
        return ''
    if min_val is not None and val < min_val:
        return 'background-color: #fbb4ae; color: red;'
    if max_val is not None and val > max_val:
        return 'background-color: #fbb4ae; color: red;'
    return 'background-color: #b6d7a8; color: green;'

# ----------------------------
# Configura√ß√£o da p√°gina
# ----------------------------
st.set_page_config(
    page_title="B3 Explorer",
    page_icon="üìà",
    layout="wide"
)
st.sidebar.success("Selecione uma p√°gina")

st.title("**B3 Explorer üìà**")

# ----------------------------
# Carregar a√ß√µes
# ----------------------------
data = pd.read_csv('acoes-listadas-b3.csv')

if 'Setor' not in data.columns:
    st.error("O arquivo CSV precisa conter a coluna 'Setor'.")
    st.stop()

stocks = list(data['Ticker'].values)
setores = sorted(data['Setor'].dropna().unique())
setores.insert(0, "Todos")

# Filtro de setor
setores_selecionados = st.sidebar.multiselect(
    'Escolha setores (ou "Todos" para todos):', setores, default=["Todos"]
)

if "Todos" in setores_selecionados or not setores_selecionados:
    tickers_filtrados = data['Ticker'].tolist()
else:
    tickers_filtrados = data[data['Setor'].isin(setores_selecionados)]['Ticker'].tolist()

st.subheader("Explore a√ß√µes da B3 üß≠")
tickers = st.multiselect('Escolha a√ß√µes para explorar! (2 ou mais)', tickers_filtrados)

if tickers:
    try:
        with st.spinner('üîÑ Carregando dados fundamentalistas...'):
            df = pd.concat([fundamentus.get_papel(t) for t in tickers])
            df['PL'] = clean_numeric_column(df['PL'])

        st.subheader("Setor")
        st.write(df[['Empresa', 'Setor', 'Subsetor']].drop_duplicates(keep='last'))

        # ----------------------------
        # Informa√ß√µes de Mercado
        # ----------------------------
        st.subheader("Informa√ß√µes de Mercado")
        df_price = df[['Cotacao', 'Min_52_sem', 'Max_52_sem', 'Vol_med_2m',
                       'Valor_de_mercado', 'Data_ult_cot']]
        df_price.columns = ["Cota√ß√£o", "M√≠nimo (52 semanas)", "M√°ximo (52 semanas)",
                            "Volume M√©dio (2 meses)", "Valor de Mercado", "Data √öltima Cota√ß√£o"]

        for col in ["Cota√ß√£o", "M√≠nimo (52 semanas)", "M√°ximo (52 semanas)",
                    "Volume M√©dio (2 meses)", "Valor de Mercado"]:
            df_price[col] = clean_numeric_column(df_price[col]).fillna(0)

        st.dataframe(df_price.style.format({
            "Cota√ß√£o": "R$ {:,.2f}",
            "M√≠nimo (52 semanas)": "R$ {:,.2f}",
            "M√°ximo (52 semanas)": "R$ {:,.2f}",
            "Volume M√©dio (2 meses)": "{:,.0f}",
            "Valor de Mercado": "R$ {:,.0f}"
        }), use_container_width=True)

        # ----------------------------
        # Indicadores Financeiros
        # ----------------------------
        st.subheader("Indicadores Financeiros")
        df_ind = df[['Marg_Liquida','Marg_EBIT','ROE','ROIC','Div_Yield',
                     'Cres_Rec_5a','PL','EV_EBITDA','Empresa']].drop_duplicates(keep='last')
        df_ind.columns = ["Margem L√≠quida", "Margem EBIT", "ROE", "ROIC",
                          "Dividend Yield", "Crescimento Receita 5 anos", "P/L", "EV/EBITDA", "Empresa"]

        for col in df_ind.columns.drop('Empresa'):
            df_ind[col] = clean_numeric_column(df_ind[col])
        df_ind = df_ind.fillna(0)

        # Filtros Personalizados
        st.sidebar.subheader("Filtros Personalizados")
        min_ebit = st.sidebar.number_input("Margem EBIT m√≠nima (%)", value=0.0, step=0.1)
        min_roe = st.sidebar.number_input("ROE m√≠nimo (%)", value=0.0, step=0.1)
        min_dividend = st.sidebar.number_input("Dividend Yield m√≠nimo (%)", value=0.0, step=0.1)
        max_pl = st.sidebar.number_input("P/L m√°ximo", value=1000.0, step=0.1)

        def style_indicators(row):
            styles = [''] * len(row)
            col_idx = {col: i for i, col in enumerate(row.index)}
            styles[col_idx['Margem EBIT']] = highlight_val(row['Margem EBIT'], min_val=min_ebit)
            styles[col_idx['ROE']] = highlight_val(row['ROE'], min_val=min_roe)
            styles[col_idx['Dividend Yield']] = highlight_val(row['Dividend Yield'], min_val=min_dividend)
            styles[col_idx['P/L']] = highlight_val(row['P/L'], max_val=max_pl)
            return styles

        styled_ind = df_ind.style.format({
            "Margem L√≠quida": "{:.2f}%",
            "Margem EBIT": "{:.2f}%",
            "ROE": "{:.2f}%",
            "ROIC": "{:.2f}%",
            "Dividend Yield": "{:.2f}%",
            "Crescimento Receita 5 anos": "{:.2f}%",
            "P/L": "{:.2f}",
            "EV/EBITDA": "{:.2f}",
            "Empresa": lambda x: x
        }).apply(style_indicators, axis=1)

        st.dataframe(styled_ind, use_container_width=True)

        # ----------------------------
        # Cota√ß√£o hist√≥rica
        # ----------------------------
        tickers_yf = [t + ".SA" for t in tickers]
        data_inicio = st.sidebar.date_input("Data Inicial üìÖ", datetime.date(2025,1,1),
                                            min_value=datetime.date(2000,1,1),
                                            max_value=datetime.date.today())

        interval_selected = st.sidebar.selectbox('Intervalo üìä',
                                                 ['1d','1wk','1mo','3mo','6mo','1y'])

        with st.spinner('üì• Baixando cota√ß√µes do Yahoo Finance...'):
            data_prices = yf.download(tickers_yf, start=data_inicio, end=datetime.datetime.now(),
                                      interval=interval_selected)['Close']
        if isinstance(data_prices.columns, pd.MultiIndex):
            data_prices = data_prices.droplevel(0, axis=1)

        st.subheader("Cota√ß√£o Hist√≥rica")
        st.line_chart(data_prices)

        # ----------------------------
        # Retornos
        # ----------------------------
        returns = data_prices.pct_change().dropna() * 100
        returns_pct = returns.round(2).astype(str) + '%'
        st.subheader("Retornos (%)")
        st.dataframe(returns_pct)

        # ----------------------------
        # Not√≠cias com Resumo
        # ----------------------------
        st.subheader("üì∞ √öltimas Not√≠cias (Web Scraping com Resumo)")

        progress = st.progress(0)
        total = len(tickers)

        for i, t in enumerate(tickers, start=1):
            st.markdown(f"### {t}")
            try:
                googlenews = GoogleNews(lang='pt', region='BR')
                googlenews.search(f"{t} B3")
                news_list = googlenews.result()[:3]

                if news_list:
                    for news in news_list:
                        title = news.get('title', 'Sem t√≠tulo')
                        link = news.get('link', '#')
                        media = news.get('media', 'Desconhecido')

                        # Resumo autom√°tico
                        resumo = "Resumo n√£o dispon√≠vel."
                        try:
                            article = Article(link, language='pt')
                            article.download()
                            article.parse()
                            article.nlp()
                            resumo = article.summary if article.summary else resumo
                        except:
                            pass

                        st.markdown(f"**[{title}]({link})** ({media})")
                        st.markdown(f"*Resumo:* {resumo}")
                        st.markdown("---")
                else:
                    st.write("Sem not√≠cias recentes encontradas.")
            except Exception as e:
                st.write(f"Erro ao buscar not√≠cias para {t}: {e}")

            progress.progress(i / total)

    except Exception as e:
        st.error(f"Erro ao buscar dados: {e}")
else:
    st.info("Selecione pelo menos uma a√ß√£o para iniciar a an√°lise.")





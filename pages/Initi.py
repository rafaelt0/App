import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import warnings
import plotly.express as px
import plotly.graph_objects as go
from pypfopt.hierarchical_portfolio import HRPOpt
from quantstats.stats import sharpe, sortino, max_drawdown, var, cvar, tail_ratio
from scipy.stats import kurtosis, skew
import quantstats as qs
import io

aba1, aba2 = st.tabs(["üìä An√°lise do Portf√≥lio", "üß™ Simula√ß√£o Monte Carlo Portfolio"])

warnings.filterwarnings('ignore')
st.set_option('deprecation.showPyplotGlobalUse', False)



with aba1:
    st.title("An√°lise e Otimiza√ß√£o de Portf√≥lio - B3 Explorer")
    # Sidebar config
    st.sidebar.header("Configura√ß√µes do Portf√≥lio")
    
    data_inicio = st.sidebar.date_input("Data Inicial", datetime.date(2025, 1, 1), min_value=datetime.date(2000, 1, 1))
    valor_inicial = st.sidebar.number_input("Valor Investido (R$)", 100, 1_000_000, 10_000)
    taxa_selic = st.sidebar.number_input("Taxa Selic (%)", value=0.0556, max_value=15.0)
    
    # Sele√ß√£o de a√ß√µes
    data = pd.read_csv('acoes-listadas-b3.csv')
    stocks = list(data['Ticker'].values)
    tickers = st.multiselect("Selecione as a√ß√µes do portf√≥lio", stocks)
    
    if len(tickers) == 0:
        st.warning("Selecione pelo menos uma a√ß√£o.")
        st.stop()
    
    if len(tickers) == 1:
        st.warning("Selecione pelo menos dois ativos para montar o portf√≥lio.")
        st.stop()
    
    tickers_yf = [t + ".SA" for t in tickers]
    
    # Baixa dados
    data_yf = yf.download(tickers_yf, start=data_inicio, progress=False)['Close']
    if isinstance(data_yf.columns, pd.MultiIndex):
        data_yf.columns = ['_'.join(col).strip() for col in data_yf.columns.values]
    
    returns = data_yf.pct_change().dropna()
    
    # Escolha modo: manual ou otimizado
    modo = st.sidebar.radio("Modo de aloca√ß√£o", ("Otimiza√ß√£o Hierarchical Risk Parity (HRP)", "Aloca√ß√£o Manual"))
    
    if modo == "Aloca√ß√£o Manual":
        st.subheader("Defina manualmente a porcentagem de cada ativo (soma deve ser 100%)")
        pesos_manuais = {}
        total = 0.0
        for ticker in tickers:
            p = st.number_input(f"Peso % de {ticker}", min_value=0.0, max_value=100.0, value=round(100/len(tickers),2), step=0.01)
            pesos_manuais[ticker + ".SA"] = p / 100
            total += p
        if abs(total - 100) > 0.01:
            st.error(f"A soma dos pesos √© {total:.2f}%, deve ser 100%")
            st.stop()
        pesos_manuais_arr = np.array(list(pesos_manuais.values()))
        peso_manual_df = pd.DataFrame.from_dict(pesos_manuais, orient='index', columns=["Peso"])
    else:
        st.subheader("Otimiza√ß√£o Hierarchical Risk Parity (HRP)")
        hrp = HRPOpt(returns)
        weights_hrp = hrp.optimize()
        peso_manual_df = pd.DataFrame.from_dict(weights_hrp, orient='index', columns=["Peso"])
        pesos_manuais_arr = peso_manual_df["Peso"].values
    
    # Mostrar pesos
    st.subheader("Pesos do Portf√≥lio (%)")
    peso_manual_df.index = peso_manual_df.index.str.replace(".SA","")
    st.dataframe((peso_manual_df*100).round(2).T)
    
    # Gr√°fico pizza das porcentagens
    fig_pie = px.pie(peso_manual_df.reset_index(), values="Peso", names="index",
                     title="Composi√ß√£o do Portf√≥lio (%)",
                     labels={"index": "Ativo", "Peso": "Percentual"})
    st.plotly_chart(fig_pie)
    
    # Heatmap e Matriz de Correla√ß√£o
    heatmap=sns.heatmap(data_yf.corr(), annot=True)
    st.subheader("Matrix de Correla√ß√£o")
    st.write(data_yf.corr())
    st.subheader("Heatmap")
    st.pyplot(heatmap.figure)
    
    # C√°lculo do portf√≥lio com os pesos escolhidos
    portfolio_returns = returns.dot(pesos_manuais_arr)
    cum_return = (1 + portfolio_returns).cumprod()
    portfolio_value = cum_return * valor_inicial
    
    bench = yf.download("^BVSP", start=data_inicio, progress=False)['Close'].dropna()
    retorno_bench = bench.pct_change().dropna()
    
    # Valores port e bench
    portfolio_value = (1 + portfolio_returns).cumprod() * valor_inicial
    bench_value = (1 + retorno_bench).cumprod() * valor_inicial
    
    portfolio_value.index = pd.to_datetime(portfolio_value.index)
    bench_value.index = pd.to_datetime(bench_value.index)

    st.write(bench_value)
    st.write(portfolio_value)

    # Plotly
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=portfolio_value.index, 
        y=portfolio_value.values,
        mode='lines', 
        name='Portf√≥lio'
    ))
    
    fig.add_trace(go.Scatter(
        x=bench_value.index, 
        y=bench_value.values,
        mode='lines', 
        name='IBOVESPA',
        line=dict(color='orange')  # cor diferente para destacar
    ))
    
    fig.update_layout(
        title='Compara√ß√£o: Portf√≥lio x IBOVESPA',
        xaxis_title='Data', 
        yaxis_title='Valor (R$)',
        hovermode='x unified',
        template='plotly_white'
    )
    
    st.plotly_chart(fig, use_container_width=True)

    
    # Informa√ß√µes do portf√≥lio
    portfolio_info = pd.DataFrame({
        "Valor Inicial": [valor_inicial],
        "Valor M√°ximo": [portfolio_value.max()],
        "Valor M√≠nimo": [portfolio_value.min()],
        "Valor Final": [portfolio_value.iloc[-1]],
        "Retorno Total (%)": [(portfolio_value.iloc[-1]/valor_inicial - 1)*100],
        "Retorno M√©dio Di√°rio (%)": [portfolio_returns.mean()*100],
        "Volatilidade Di√°ria (%)": [portfolio_returns.std()*100]
    })
    st.subheader("Informa√ß√µes do Portf√≥lio")
    st.dataframe(portfolio_info.style.format("{:,.2f}"))
    
    # Distribui√ß√£o de retornos com estat√≠sticas
    st.subheader("Distribui√ß√£o dos Retornos Di√°rios (%) e Estat√≠sticas")
    fig_hist, ax_hist = plt.subplots(figsize=(10,5))
    sns.histplot(portfolio_returns*100, bins=50, kde=True, color='skyblue', ax=ax_hist)
    ax_hist.set_xlabel("Retornos Di√°rios (%)")
    ax_hist.set_ylabel("Frequ√™ncia")
    
    media = portfolio_returns.mean()*100
    desvio = portfolio_returns.std()*100
    curtose_val = kurtosis(portfolio_returns, fisher=True)
    assimetria_val = skew(portfolio_returns)
    
    stats_text = (f"M√©dia: {media:.4f}%\n"
                  f"Desvio Padr√£o: {desvio:.4f}%\n"
                  f"Curtose (Fisher): {curtose_val:.4f}\n"
                  f"Assimetria: {assimetria_val:.4f}")
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.8)
    ax_hist.text(0.95, 0.95, stats_text, transform=ax_hist.transAxes,
                 fontsize=10, verticalalignment='top', horizontalalignment='right', bbox=props)
    
    st.pyplot(fig_hist)
    
    # Estat√≠sticas do portf√≥lio
    stats = pd.DataFrame([[ 
        sharpe(portfolio_returns, rf=taxa_selic/100),
        sortino(portfolio_returns, rf=taxa_selic/100),
        max_drawdown(portfolio_returns),
        var(portfolio_returns),
        cvar(portfolio_returns),
        tail_ratio(portfolio_returns)
    ]], columns=["√çndice Sharpe", "√çndice Sortino", "Max Drawdown", "VaR", "CVaR", "Tail Ratio"])
    
    st.subheader("Estat√≠sticas do Portf√≥lio")
    st.dataframe(stats.round(4))
    
    # Bot√£o para gerar PDF via quantstats
    import tempfile
    st.subheader("Baixar Relat√≥rio Completo (QuantStats)")
    
    # Converte para formato aceito pelo QuantStats
    portfolio_returns.index = pd.to_datetime(portfolio_returns.index)
    portfolio_returns = portfolio_returns.tz_localize(None)  # Remove timezone
    
    
    with tempfile.NamedTemporaryFile(suffix=".html", delete=False) as tmpfile:
        qs.reports.html(
            portfolio_returns,
            benchmark= retorno_bench,
            output=tmpfile.name,
            title="Relat√≥rio Completo do Portf√≥lio",
            download_filename="relatorio_portfolio.html"
        )
        st.download_button(
            label="Baixar Relat√≥rio HTML Completo (QuantStats)",
            data=open(tmpfile.name, "rb").read(),
            file_name="relatorio_portfolio.html",
            mime="text/html"
        )

# Separa√ß√£o na sidebar
st.sidebar.markdown("---")

       



with aba2:
    # Op√ß√µes para usu√°rio
    st.header("Op√ß√µes Simula√ß√£o üë®‚Äçüî¨")
    n_simulations = st.slider("N√∫mero de Simula√ß√µes",10,1000,100)
    valor = st.number_input("Capital Inicial", min_value=100)
    years = int(st.number_input("Anos", min_value=1))  
    st.header("Simula√ß√£o üß™")
    
    col1, col2, col3 = st.columns([1,3,1])
    
    with col1:
        st.write("")
    
    
    with col3:
        st.write("")
         
    
    # N√∫mero de simula√ß√µes e horizonte
    n_sim = n_simulations
    n_dias = years*365  # 1 ano
    
    # Valor inicial do portf√≥lio
    valor_inicial = valor
    
    # Retornos hist√≥ricos do portf√≥lio
    mu_p = portfolio_returns.mean()
    sigma_p = portfolio_returns.std()
    
    # Simula√ß√µes Monte Carlo
    simulacoes = np.zeros((n_dias, n_sim))
    simulacoes[0] = valor_inicial
    
    for sim in range(n_sim):
        for t in range(1, n_dias):
            z = np.random.normal()
            simulacoes[t, sim] = simulacoes[t-1, sim] * np.exp((mu_p - 0.5*sigma_p**2) + sigma_p*z)
    
    # Criar DataFrame para visualiza√ß√£o
    sim_df = pd.DataFrame(simulacoes)
    sim_df.index.name = "Dia"
    
    # Plot interativo (fan chart)
    fig = px.line(sim_df, title="Simula√ß√µes de Monte Carlo para o Portf√≥lio")
    st.plotly_chart(fig)
    
    # Exibir estat√≠sticas finais
    # Estat√≠sticas finais da simula√ß√£o
    valor_esperado = sim_df.iloc[-1].mean()
    var_5 = np.percentile(sim_df.iloc[-1], 5)
    pior_cenario = sim_df.iloc[-1].min()
    melhor_cenario = sim_df.iloc[-1].max()
    
    # Criar DataFrame para exibir como tabela
    sim_stats = pd.DataFrame({
        "Valor Esperado Final (R$)": [valor_esperado],
        "VaR 5% (R$)": [var_5],
        "Pior Cen√°rio (R$)": [pior_cenario],
        "Melhor Cen√°rio (R$)": [melhor_cenario]
    })
    
    st.subheader("üìä Estat√≠sticas da Simula√ß√£o Monte Carlo")
    st.dataframe(sim_stats.style.format("{:,.2f}"))
    
    # Supondo que sim_df seja seu DataFrame com simula√ß√µes
    # sim_df.index = dias, colunas = simula√ß√µes
    
    # Calcula percentis para faixas
    percentis = [5, 25, 50, 75, 95]
    fan_chart = sim_df.quantile(q=np.array(percentis)/100, axis=1).T
    fan_chart.columns = [f"P{p}" for p in percentis]
    
    # Cria figura do fan chart
    fig_fan = go.Figure()
    
    # Adiciona faixas sombreadas
    fig_fan.add_trace(go.Scatter(
        x=fan_chart.index, y=fan_chart["P95"],
        line=dict(color='rgba(0,100,200,0.1)'), showlegend=False
    ))
    fig_fan.add_trace(go.Scatter(
        x=fan_chart.index, y=fan_chart["P5"],
        fill='tonexty', fillcolor='rgba(0,100,200,0.2)',
        line=dict(color='rgba(0,100,200,0.1)'), name='Faixa 5%-95%'
    ))
    
    fig_fan.add_trace(go.Scatter(
        x=fan_chart.index, y=fan_chart["P75"],
        line=dict(color='rgba(0,100,200,0.1)'), showlegend=False
    ))
    fig_fan.add_trace(go.Scatter(
        x=fan_chart.index, y=fan_chart["P25"],
        fill='tonexty', fillcolor='rgba(0,100,200,0.4)',
        line=dict(color='rgba(0,100,200,0.1)'), name='Faixa 25%-75%'
    ))
    
    # Linha mediana
    fig_fan.add_trace(go.Scatter(
        x=fan_chart.index, y=fan_chart["P50"],
        line=dict(color='blue', width=2), name='Mediana'
    ))
    
    # Layout final
    fig_fan.update_layout(
        title="Simula√ß√£o Monte Carlo - Fan Chart com Faixas de Confian√ßa",
        xaxis_title="Dia",
        yaxis_title="Valor do Portf√≥lio (R$)",
        template="plotly_white"
    )
    
    st.plotly_chart(fig_fan, use_container_width=True)

